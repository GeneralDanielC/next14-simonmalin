// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String //String and not Text for MongoDB
  access_token      String? @db.String // String and not Text for MongoDB
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  // expires DateTime // see 05:38:00 not implemented but can be good so user doesn't need to 2FA every time.

  @@unique([userId])
}

model Guest {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  lastName          String
  foodPreferences   String?
  alcoholPreference Boolean
  willAttend        Boolean
  party             Party?   @relation(fields: [partyId], references: [id], onDelete: Cascade)
  partyId           String?  @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
}

model Party {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  guests    Guest[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Gift {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  backstory       String?
  url             String?
  assignedToEmail String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}

model GalleryPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String
  comment   String?
  imgUrl    String
  hidden    Boolean
  createdAt DateTime @default(now())
}
